%toc c利用gettimeofday得到精确时间]
%title c利用gettimeofday得到精确时间]
%template c

_利用gettimeofday可以得到精确到微妙极的时间。_

*代码如下：*
{{{class="brush:c; highlight: [26, 56];"
#include <stdio.h>
#include <sys/time.h>
#include <time.h>
#include <stdlib.h>

int main(void)
{
	char buffer[30];
	struct timeval tv;

	time_t curtime;

	/*
	 * int gettimeofday(struct timeval *tv, struct timezone *tz);
	 *
	 * The functions gettimeofday and settimeofday can get and set the time as
	 * well  as a timezone.  The tv argument is a timeval struct, as specified
	 * in <sys/time.h>:
	 * 
	 * struct timeval {
	 * time_t         tv_sec;        // seconds 
	 * suseconds_t    tv_usec;   // microseconds 
	 * };
	 *
	 */
	gettimeofday(&tv, NULL);

	curtime = tv.tv_sec;

  /*
   * struct tm *localtime(const time_t *timep);
   * 
   * struct tm {
   * int     tm_sec;         // seconds //
   * int     tm_min;         // minutes //
   * int     tm_hour;        // hours //
   * int     tm_mday;        // day of the month //
   * int     tm_mon;         // month //
   * int     tm_year;        // year //
   * int     tm_wday;        // day of the week //
   * int     tm_yday;        // day in the year //
   * int     tm_isdst;       // daylight saving time //
   * };
   */

  /*
   * size_t strftime(char *s, size_t max, const char *format,
   * const struct tm *tm);
   * 
   * DESCRIPTION
   * The  strftime()  function  formats the broken-down time tm according to
   * the format specification format and places the result in the  character
   * array s of size max.
   *
   */
	strftime(buffer, 30, "%m-%d-%Y_%T.", localtime(&curtime));

	printf("%s%ld\n", buffer, tv.tv_usec);

	return 0;
}
}}}

*运行结果：*
{{{class="brush:c"
[root@liwei test]# vim gettimeofday.c 
[root@liwei test]# gcc -Wall -g -o time gettimeofday.c 
[root@liwei test]# ./time 
08-12-2011_07:54:00.163823
[root@liwei test]# ./time 
08-12-2011_07:54:05.948474
[root@liwei test]# 
}}}
