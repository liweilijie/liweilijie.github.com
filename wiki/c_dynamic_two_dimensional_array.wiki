%toc c动态申请二维数组
%title c动态申请二维数组
%template c

== before ==
今天在看一些代码时，感觉在使用数组方面简直是相当的浪费，而不得不用多维数组。

于是就在网上 `放狗` 查找了一下是否可以动态申请二维数组呢？

呵呵……

只要我能想到的，总是可以找到的。

自己总结了一上，写了一个测试程序。记此备忘。

== truth ==
利用malloc在堆上申请空间，这个空间是要包括多少维的空间。

也就是 `总空间 = 真正的数据元素空间 ＋ 存放维数指针的空间`

真正存放数据的空间就是数据所存放的空间。

而存放维数的指针空间是附加的。靠这种方式进行一次跳转。

其实将类型所表示真正的涵义搞明白了就能理解它了。

== coders ==
{{{class="brush:c; collapse: true; highlight: [42, 51,52];"
/**
 * @file dynamic_array_new.c
 * @brief dynamic create the two-dimensional array. like this. 
 *
 * struct aaa **x;
 * x = (struct aaa **)dynamic_array_new(5, 4, sizeof(struct aaa));
 * ....
 * ...
 * ....
 * x[1][3] ... x[0][2] //to use it.
 * ....
 * dynamic_array_free(x);
 *
 * @author :liw <liweilijie@gmail.com>
 * @version 0.0.0.1
 * @date 2011-08-14
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**
 * @brief dynamic_array_new <++> dynamic create two-dimensional array.
 *
 * @param row<++> row of two-dimensional array.
 * @param col<++> col of two-dimensional array.
 * @param size<++> size of every member into array.
 *
 * @return : success: return array poine; fail: NULL.
 */
void **dynamic_array_new(int row, int col, int size)
{
	if (0 == size || 0 == row || 0 == col)
		return NULL;

	void **arr;

	/**
	 * malloc the memory to store the two-dimensional array members.
	 * but added the row pointer memory to pointer the every array row member  address.
	 */
	arr = (void **)malloc(sizeof(void *)*row + size * row * col);

	if (NULL != arr)
	{
		void *head;
		
		head = (void *)arr + sizeof(void *)*row; /** find the data member address. */ 
		memset(arr, 0, sizeof(void *) * row + size * row * col); /** initializal all memory . */ 

		while (row--)
			arr[row] = head + size * row * col; /** to find the every tow-dimensional array row address */ 
	}
	else
		return NULL;

	return arr;
}

/**
 * @brief dynamic_array_free <++> just free the malloc momery.
 *
 * @param arr<++> the pointer by malloc.
 */
void dynamic_array_free(void **arr)
{
	if (arr != NULL)
		free(arr);
}


/**
 * @brief main <++> the test coder about tow-dimensional to dynamic create.
 *
 * @param argc<++> NULL.
 * @param argv[]<++> NULL.
 *
 * @return : always 0.
 */
int main(int argc, char *argv[])
{
	int i, j;

	struct _tt
	{
		int index; /** to pointer the two-dimensional array row */ 
		int value;  /** to store the value but this to use the col value  */ 
	};

	/** TODO(1st): malloc the two-dimensional need memory. */ 
	struct _tt **array = dynamic_array_new(5, 4, sizeof(struct _tt));

	/** TODO(2st): get the value for the every array member. */
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 4; j++)
		{
			array[i][j].index = i+1;
			array[i][j].value = j+1;
		}
	}

	/** TODO(3st): print the every value like array. */
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("ray[%d][%d].index=%1d ", i, j, array[i][j].index);
			printf("ray[%d][%d].value=%1d ", i, j, array[i][j].value);
		}
		printf("\n");
	}
	
	/** TODO(4st): free the memory while program is exiting due to it is heep. */
	dynamic_array_free(array);

	return 0;
}
}}}

== result ==
{{{class="brush:bash; collapse: true; highlight: [9, 10, 11, 12, 13];"
liwei@liweilijie test$ ls
dynamic_array_new.c
liwei@liweilijie test$ gcc -Wall -g -o dynamic_array_new dynamic_array_new.c 
dynamic_array_new.c: 在函数‘main’中:
dynamic_array_new.c:91:23: 警告：从不兼容的指针类型初始化 [默认启用]
dynamic_array_new.c:115:2: 警告：传递‘dynamic_array_free’的第 1 个参数时在不兼容的指针类型间转换 [默认启用]
dynamic_array_new.c:65:6: 附注：需要类型‘void **’，但实参的类型为‘struct _tt **’
liwei@liweilijie test$ ./dynamic_array_new 
ray[0][0].index=1 ray[0][0].value=1 ray[0][1].index=1 ray[0][1].value=2 ray[0][2].index=1 ray[0][2].value=3 ray[0][3].index=1 ray[0][3].value=4 
ray[1][0].index=2 ray[1][0].value=1 ray[1][1].index=2 ray[1][1].value=2 ray[1][2].index=2 ray[1][2].value=3 ray[1][3].index=2 ray[1][3].value=4 
ray[2][0].index=3 ray[2][0].value=1 ray[2][1].index=3 ray[2][1].value=2 ray[2][2].index=3 ray[2][2].value=3 ray[2][3].index=3 ray[2][3].value=4 
ray[3][0].index=4 ray[3][0].value=1 ray[3][1].index=4 ray[3][1].value=2 ray[3][2].index=4 ray[3][2].value=3 ray[3][3].index=4 ray[3][3].value=4 
ray[4][0].index=5 ray[4][0].value=1 ray[4][1].index=5 ray[4][1].value=2 ray[4][2].index=5 ray[4][2].value=3 ray[4][3].index=5 ray[4][3].value=4 
liwei@liweilijie test$ 

}}}

== postscript ==
其实上面的例子是一个很经典的技巧，也很容易想到，也可以这样来理解这个例子。

{{{class="brush:c; collapse:true"
/**
 * @file d_n.c
 * @brief dynamic create the two-dimensional array. like this. 
 *
 * struct aaa **x;
 * x = (struct aaa **)dynamic_array_new(5, 4, sizeof(struct aaa));
 * ....
 * ...
 * ....
 * x[1][3] ... x[0][2] //to use it.
 * ....
 * dynamic_array_free(x);
 *
 * @author :liw <liweilijie@gmail.com>
 * @version 0.0.0.1
 * @date 2011-08-14
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**
 * @brief dynamic_array_new <++> dynamic create two-dimensional array.
 *
 * @param row<++> row of two-dimensional array.
 * @param col<++> col of two-dimensional array.
 * @param size<++> size of every member into array.
 *
 * @return : success: return array poine; fail: NULL.
 */
void **dynamic_array_new(int row, int col, int size)
{
	if (0 == size || 0 == row || 0 == col)
		return NULL;

	void **arr;

	/**
	 * malloc the memory to store the two-dimensional array members.
	 * but added the row pointer memory to pointer the every array row member  address.
	 */
	arr = (void **)malloc(size * row * col);

	if (NULL != arr)
	{
		/** void *head;*/
		
		/** head = (void *)arr + sizeof(void *)*row; [>find the data member address. <] */
		/** memset(arr, 0, sizeof(void *) * row + size * row * col); [>initializal all memory . <] */
		memset(arr, 0, size * row * col); /** initializal all memory . */

		/** while (row--)*/
			/** arr[row] = head + size * row * col; [>to find the every tow-dimensional array row address <] */
	}
	else
		return NULL;

	return arr;
}

/**
 * @brief dynamic_array_free <++> just free the malloc momery.
 *
 * @param arr<++> the pointer by malloc.
 */
void dynamic_array_free(void **arr)
{
	if (arr != NULL)
		free(arr);
}


/**
 * @brief main <++> the test coder about tow-dimensional to dynamic create.
 *
 * @param argc<++> NULL.
 * @param argv[]<++> NULL.
 *
 * @return : always 0.
 */
int main(int argc, char *argv[])
{
	int i, j;

	struct _tt
	{
		int index; /** to pointer the two-dimensional array row */ 
		int value;  /** to store the value but this to use the col value  */ 
	};
	typedef struct _tt (*yy)[4];

	/** TODO(1st): malloc the two-dimensional need memory. */ 
	/** struct _tt (*array)[20] = dynamic_array_new(5, 4, sizeof(struct _tt));*/
	yy array = (yy)dynamic_array_new(5, 4, sizeof(struct _tt));
	

	/** TODO(2st): get the value for the every array member. */
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 4; j++)
		{
			array[i][j].index = i+1;
			array[i][j].value = j+1;
		}
	}

	/** TODO(3st): print the every value like array. */
	for (i = 0; i < 5; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("ray[%d][%d].index=%1d ", i, j, array[i][j].index);
			printf("ray[%d][%d].value=%1d ", i, j, array[i][j].value);
		}
		printf("\n");
	}
	
	/** TODO(4st): free the memory while program is exiting due to it is heep. */
	dynamic_array_free(array);

	return 0;
}
}}}

_结果如下：_
{{{class="brush:bash; collapse: true;"
liwei@liweilijie test$ vim d_n.c 
liwei@liweilijie test$ gcc -Wall -g -o d d_n.c 
d_n.c: 在函数‘main’中:
d_n.c:96:13: 警告：从不兼容的指针类型初始化 [默认启用]
d_n.c:121:2: 警告：传递‘dynamic_array_free’的第 1
个参数时在不兼容的指针类型间转换 [默认启用]
d_n.c:66:6: 附注：需要类型‘void **’，但实参的类型为‘yy’
liwei@liweilijie test$ ./d
ray[0][0].index=1 ray[0][0].value=1 ray[0][1].index=1 ray[0][1].value=2
ray[0][2].index=1 ray[0][2].value=3 ray[0][3].index=1 ray[0][3].value=4 
ray[1][0].index=2 ray[1][0].value=1 ray[1][1].index=2 ray[1][1].value=2
ray[1][2].index=2 ray[1][2].value=3 ray[1][3].index=2 ray[1][3].value=4 
ray[2][0].index=3 ray[2][0].value=1 ray[2][1].index=3 ray[2][1].value=2
ray[2][2].index=3 ray[2][2].value=3 ray[2][3].index=3 ray[2][3].value=4 
ray[3][0].index=4 ray[3][0].value=1 ray[3][1].index=4 ray[3][1].value=2
ray[3][2].index=4 ray[3][2].value=3 ray[3][3].index=4 ray[3][3].value=4 
ray[4][0].index=5 ray[4][0].value=1 ray[4][1].index=5 ray[4][1].value=2
ray[4][2].index=5 ray[4][2].value=3 ray[4][3].index=5 ray[4][3].value=4 
liwei@liweilijie test$ 

}}}

