%toc vim motion.高效编辑
%title vim motion.高效编辑
%template vim


==== 1. 好久不见 ====
代码中编辑一些配对符号内的内容是十分普遍的，这些配对符号包括：”, “”, (), {}, [], <>等等。

vim提供了一些命令来方便的编辑这些符号所包含的内容，将光标定位于某符号（如(或者)）：

- *ci*: 例如，ci(，或者ci)，将会修改()之间的文本；
- *di*: 剪切配对符号之间文本；
- *yi*: 复制；
- *ca*: 同ci，但修改内容包括配对符号本身；
- *da*: 同di，但剪切内容包括配对符号本身；
- *ya*: 同yi，但复制内容包括配对符号本身。

*备注：dib等同于di(。diB等同于di{。*


==== 2. 不见不见 ====
_在“一组能让你爽出内伤的 vim motion”里头看到一组这样的vim操作：_

* *ci[* 删除一对 *[]* 中的所有字符并进入插入模式
* *ci(* 删除一对 *()* 中的所有字符并进入插入模式
* *ci<* 删除一对 *<>* 中的所有字符并进入插入模式
* *ci{* 删除一对 *{}* 中的所有字符并进入插入模式
* *cit* 删除一对 *HTML/XML* 的标签内部的所有字符并进入插入模式

{{{class="brush:plain; gutter: false;"
ci” ci’ ci` 删除一对引号字符 (” 或 ‘ 或 `) 中所有字符并进入插入模式
}}}

_从上面的操作中进一步演化，还能有些实用的组合：_

- *vi[* 选择一对 *[]* 中的所有字符
- *vi(* 选择一对 *()* 中的所有字符
- *vi<* 选择一对 *<>* 中的所有字符
- *vi{* 选择一对 *{}* 中的所有字符
- *vit* 选择一对 *HTML/XML* 的标签内部的所有字符
{{{class="brush:plain; gutter: false"
 vi” vi’ vi` 选择一对引号字符 (” 或 ‘ 或 `) 中所有字符
}}}
如果在选择之后，再用zf组合把它们缩成一行(folder).






