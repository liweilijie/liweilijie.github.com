%toc shell.array
%title shell.array

shell的强大让我欣喜若狂，最近一直在做一些升级上的工作，主要用shell脚本。着实开发的效率比较高。这里总结一下数组的一些应用。

=== 1. 数据定义 ===

{{{class="brush:bash;"
[liwei@localhost ~]$ a=(1 2 3 4 5); echo $a
1
}}}

一对括号表示数组，数组元素用“空格”符号分割开。

=== 2. 数组的读取与赋值 ===

- 得到长度
{{{class="brush:bash;"
[liwei@localhost ~]$ echo ${#a[@]}
5
[liwei@localhost ~]$ echo ${#a[*]}
5
}}}

用`${#数组名[@或*]}`可以得到数组长度

- 读取
{{{class="brush:bash;"
[liwei@localhost ~]$ echo ${a[2]}
3
[liwei@localhost ~]$ echo ${a[*]}
1 2 3 4 5
}}}

用 `${数组名[下标]}` 下标是从0开始，下标如果是：`*`或者`@` 得到整个数组内容。

- 赋值
{{{class="brush:bash;"
[liwei@localhost ~]$ a[1]=100
[liwei@localhost ~]$ echo ${a[*]}
1 100 3 4 5
[liwei@localhost ~]$ a[5]=100
[liwei@localhost ~]$ echo ${a[*]}
1 100 3 4 5 100
}}}
直接通过 `数组名[下标]` 就可以对其进行引用赋值，如果下标不存在，自动添加新一个数组元素。

- 删除
{{{class="brush:bash;"
[liwei@localhost ~]$ a=(1 2 3 4 5)
[liwei@localhost ~]$ unset a
[liwei@localhost ~]$ echo ${a[*]}

[liwei@localhost ~]$ a=(1 2 3 4 5)
[liwei@localhost ~]$ echo ${a[*]}
1 2 3 4 5
[liwei@localhost ~]$ unset a[1]
[liwei@localhost ~]$ echo ${a[*]}
1 3 4 5
[liwei@localhost ~]$ echo ${#a[*]}
4
}}}
直接通过：`unset 数组[下标]` 可以清除相应的元素，不带下标，清除整个数组。

=== 3. 特殊使用 ===

- 分片
{{{class="brush:bash;"
[liwei@localhost ~]$ a=(1 2 3 4 5)
[liwei@localhost ~]$ echo ${a[@]:0:3}
1 2 3
[liwei@localhost ~]$ echo ${a[@]:1:4}
2 3 4 5
}}}

{{{class="brush:bash;"
[liwei@localhost ~]$ c=(${a[@]:1:4})
[liwei@localhost ~]$ echo ${#c[@]}
4
[liwei@localhost ~]$ echo ${c[*]}
2 3 4 5
}}}

直接通过 `${数组名[@或*]:起始位置:长度}` 切片原先数组，返回字符串，中间用“空格”分开， 因此如果加上“()”，将得到切片数组，上面例子：c就是一个新数据。

- 替换
{{{class="brush:bash;"
[liwei@localhost ~]$ a=(1 2 3 4 5)
[liwei@localhost ~]$ echo ${a[@]/3/100}
1 2 100 4 5
[liwei@localhost ~]$ echo ${a[@]}
1 2 3 4 5
}}}

调用方法是： `${数组名[@或*]/查找字符/替换字符}` 该操作不会改变原先数组内容，如果需要修改，可以看上面的例子，重新定义数组。
