%toc expect 自动运行命令
%title expect 自动运行命令

----

最近做升级有关的东西，但是在代码里面有一个很低级的错误。

也就是文件打开了没有关闭，由于从其他同事那儿接过来的代码，本来运行很稳定的，所以也就没有检查是否有问题。

最后导致太多的设备不能正常升级。于是我写了一个脚本一个一个自动登陆到设备上，进行替换模块。

----

- 首先是login.sh脚本，它主要是将配置文件里面的所有ip地址读进来，然后转化为点分十进制式的ip,调用expect脚本进行操作。

{{{class="brush:bash;"
#!/bin/bash
#author: liw
#create time:2011-06-16
if [ -z "$1" ]
then
	echo "sh login.sh ./ip.tbl $0 $1 ";
	exit;
fi
ssh_user="mat"
ssh_port="22";
ssh_password="H192g213"
ip_file=$1
if [ ! -e "$ip_file" ]
then
	echo "$ip_file is not exists";
	exit;
fi
account=0
for i in `cat $ip_file`
do
	if [ "X$i" != "X0" -a ! -z $i ]
	then
		account=$account+1
		ssh_host=`client -i $i|awk '{print $2}'`
		#echo ".......[${account}]:[$i]=>[$ssh_host]................."
		#echo "["`date +"%F %T"`"] (ssh  $ssh_user@$ssh_host && passwd:$ssh_password) start"
		/usr/bin/expect action.sh "$ssh_host" "$ssh_port" "$ssh_user" "$ssh_password"
		#echo "["`date +"%F %T"`"] (ssh $ssh_user@$ssh_host end"
		#echo ""
	fi
done
echo "process all done."
}}}

----

- 接着是back.action.sh脚本。 它是真正的expect脚本，它将两次登陆。

{{{class="brush:bash;"
#!/usr/bin/expect
#author: liw
#description: auto login qzt and execute any command.
set scphost "[lindex $argv 0]"
set port "[lindex $argv 1]"
set scpuser "[lindex $argv 2]"
set scppw "[lindex $argv 3]"
set passwd_x86 "x86"
set passwd_arm "arm"
set timeout 5
send_user "\nssh $scpuser@$scphost\n"
spawn ssh $scpuser@$scphost
expect {
-re ".*Are.*.*yes.*no.*" {
send "yes\r"
exp_continue
}
-re ".*assword.*" {
set timeout 8
send "$scppw\r"
#send "\n"
exp_continue
}
-re ".*2\.{1,}.*设备状态.*" {
set timeout 8
send_user "..................get the qzt status.......\n"
#puts "ooooooooooooooooooooo:$expect_out(buffer)"
send "2\r"
exp_continue
}

-re "16\.{1,}查看设备硬盘信息.*\n" {
set timeout 8
sleep 1
send_user "\n....................get harddisk info.......\n"
#puts "ooooooooooooooooooooo:$expect_out(buffer)"
send "16\r"
#puts "ppppppppppppppppp $expect_out(buffer)"
exp_continue
}

-re "14\.{1,}查看设备硬盘信息.*\n" {
set timeout 8
#sleep 1
send_user "\n....................get harddisk info.......\n"
#puts "ooooooooooooooooooooo:$expect_out(buffer)"
send "14\r"
send_user "......send to 14......................................\n"
exp_continue
}

-re ".*硬盘.*号.*" {
set timeout 8
send_user "\n....................get harddisk sequnce number success success .......\n"
#puts "ppppppppppppppppp $expect_out(buffer)"
#set haha [exec date]
#set harddisk_seq [exec sh -c "echo $expect_out(buffer) | sed {s/.*\^\{1,\}\(.*\)\].*/\1/g}"]
set harddisk_seq [exec echo $expect_out(buffer) | sed -n {s/.*\^\{1,\}\(.*\)\].*/\1/gp}]
set passwd_x86 [exec curl -s -d "hd_sn=$harddisk_seq&qzt_type=x86" http://192.168.3.208/getkey.do | sed -n {s/.*<pass>\(.*\)<\/pass>.*/\1/gp}]
set passwd_arm [exec curl -s -d "hd_sn=$harddisk_seq&qzt_type=arm" http://192.168.3.208/getkey.do | sed -n {s/.*<pass>\(.*\)<\/pass>.*/\1/gp}]
#puts "exec curl -s -d {hd_sn=${harddisk_seq}&qzt_type=x86} http://192.168.3.208/getkey.do | sed -n {s/.*<pass>\(.*\)<\/pass>.*/\1/gp}"
#puts "[exec curl -s -d {hd_sn=$harddisk_seq&qzt_type=x86} http://192.168.3.208/getkey.do]"
#set harddisk_seq [exec echo www.baidu.com | sed {s/.*\.\(.*\)\..*/\1/g}]
puts "phhhhhhhhhhhhhhh $harddisk_seq"
puts "x86 hhhhhhhhhhhhhhh $passwd_x86"
puts "arm hhhhhhhhhhhhhhh $passwd_arm"
#puts [exec echo {$passwd_x86} > t.tt]
#puts [exec echo "$passwd_x86" > t.tt]

}

}
send_user "over......................................\n"
close $spawn_id

if {$passwd_x86 != "x86"} {
	spawn ssh root@$scphost
	expect {
	-re ".*Are.*.*yes.*no.*" {
	send "yes\n"
	exp_continue
}
-re ".*assword.*" {
set timeout 15
# 记住这里的'\r' 与'\n'的不一样，打印时用'\n',而在发送命令回车时用：'\r'
send "$passwd_x86\r"
send_user "success x86 $passwd_x86\n"
expect {
-re ".*Permission.*" {
send "$passwd_arm\r"
send "\r"
send_user "send arm $passwd_arm\n"
exp_continue
}
-re ".*]#" {
send "df -lh\r"
send "cat /etc/config_issue\r"
#send "lsof -p `pidof beap_eupdate`\r"
send "killall -9 beap_eupdate\r"
send "kill -KILL `pidof beap_eupdate`\r"
send "exit\r"
}
}
exp_continue
}
}
}

exit 0
}}}

----

- 由于mat登陆得到的中文信息是gbk的，而脚本在写时利用了utf-8的，所以要将utf-8编码转为gbk的编码运行才行。
	`iconv -f UTF-8 -t GBK back.action.sh > action.sh`

最后运行：`./login ./debug_ip.txt`

----
